#include "CONSTANTS.H"
#include "IceConstants.H"

c------------------------------------
c compute C |u|^m
c-----------------------------------

      subroutine BFRICTIONPOWER(CHF_FRA1[alpha],
     &     CHF_CONST_FRA[u],
     &     CHF_CONST_FRA1[C],
     &     CHF_CONST_FIA1[mask],
     &     CHF_CONST_REAL[m],
     &     CHF_BOX[box])

      integer CHF_AUTODECL[i]
      Real usq, mExp

      mExp = m/two
    
      
      CHF_AUTOMULTIDO[box;i]
         CHF_DTERM[
         usq = u(CHF_AUTOIX[i],0)**2;
     &        + u(CHF_AUTOIX[i],1)**2;
     &        + u(CHF_AUTOIX[i],2)**2]
         if (mask(CHF_AUTOIX[i]).eq.GROUNDEDMASKVAL) then       
            alpha(CHF_AUTOIX[i]) = C(CHF_AUTOIX[i]) 
     &           * (usq + 1.0e-6)**mExp
         else
            alpha(CHF_AUTOIX[i]) = C(CHF_AUTOIX[i]) 
         end if
         
      
      CHF_ENDDO
      return
      end

c------------------------------------
c compute alpha = alpha * u.u
c-----------------------------------
      subroutine BFRICTIONAUU(CHF_FRA1[alpha],
     &     CHF_CONST_FRA[u],
     &     CHF_BOX[box])

      integer CHF_AUTODECL[i], ncomp, icomp
      Real usq

      CHF_AUTOMULTIDO[box;i]
      CHF_DTERM[
      usq = u(CHF_AUTOIX[i],0)**2;
     &     + u(CHF_AUTOIX[i],1)**2;
     &     + u(CHF_AUTOIX[i],2)**2]
      
      alpha(CHF_AUTOIX[i]) = alpha(CHF_AUTOIX[i]) * usq
      
      CHF_ENDDO

      return
      end
      

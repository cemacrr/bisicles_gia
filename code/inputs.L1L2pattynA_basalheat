#inputs file for Amr ice-sheet solver
main.maxTime = 1000  # maximum time to run to
main.maxStep = 1000   # maximum number of steps to run
#main.constitutiveRelation = GlensLaw
main.constitutiveRelation = L1L2

main.rateFactor = patersonRate
main.basalRateFactor = patersonRate


main.domain_size = 160000.0 160000.0 160000.0 

CalvingModel.type = NoCalvingModel

surfaceFlux.type = zeroFlux
basalFlux.type = zeroFlux

geometry.problem_type = basic
geometry.basal_type = pattynAZb
geometry.thickness_type = pattynAH
geometry.basalSlope = -0.0087488664 0.0 # 0.5 degree slope
#geometry.basalSlope = -0.00 0.0 # 0.5 degree slope
geometry.beta_type = constantBeta
geometry.betaValue = 1.0e+3
geometry.betaEps = 0.001

amr.maxLevel = 0   # finest level allowed in simulation
amr.ref_ratio = 2 2 2
amr.num_cells = 128 128 12  #number of cells in base grid
amr.is_periodic = 1 1 1    # 1 if domain is periodic 
# (note that periodic BC's override physical BC types)
# physical BC types:  0 = homogeneous Dirichlet
#                     1 = homogeneous Neumann
bc.lo_bc = 0 0 0  
bc.hi_bc = 0 0 0  

amr.cfl = 0.25  # "cfl" number
amr.initial_cfl = 0.25  # "cfl" number
amr.max_dt_grow_factor = 1.1 #max amount dt can grow from one timestep to another


amr.plot_interval = 1  
amr.plot_prefix = L1L2pattynA.
amr.check_interval = -1
amr.check_prefix = chk
amr.verbosity = 5

amr.ref_ratio = 2 2 2   # refinement ratios
amr.regrid_interval = 10000   # number of timesteps between regridding
amr.blockFactor = 4           # block factor used in grid generation
amr.fill_ratio = 0.8          # how efficient are the grids
amr.nestingRadius = 1         # proper nesting radius required
amr.tags_grow = 1             # amount to buffer tags
amr.max_box_size = 128         # largest box length allowed

 # this problem seems to need more picard iterations
amr.max_solver_iterations = 100
amr.velocity_solver_tolerance = 1.0e-5
amr.write_solver_rhs = true
amr.write_temperature = true


amr.velocity_solver_type = 1 #JFNK
amr.do_initial_velocity_guess = 1
amr.do_initial_velocity_solve = 1
amr.initial_velocity_guess_type = 1 # linear PDE
amr.initial_velocity_guess_const_mu = 1.0e+6
amr.initial_velocity_guess_solver_type = 1 # use JFNK solver's linear mode

#JFNK parameters
JFNKSolver.vtopSafety = 0.95
JFNKSolver.minPicardIterations = 3
JFNKSolver.maxIter = 10
JFNKSolver.absTol = 1.0e+0
JFNKSolver.relTol = 1.0e-3
JFNKSolver.solverType = 0 #Relax solver
JFNKSolver.RelaxRelTol = 2.0e-3
JFNKSolver.maxRelaxIter = 10
JFNKSolver.normType = 0
JFNKSolver.verbosity = 5
JFNKSolver.vtopRelaxTol = 0.005
JFNKSolver.vtopRelaxMinIter = 8
JFNKSolver.numMGSmooth = 8
JFNKSolver.numMGIter = 1
JFNKSolver.h = 0.025
JFNKSolver.switchRate = 2.0
#JFNKSolver.writeResiduals = true
#JFNKSolver.muMin = 1.0e+4
#JFNKSolver.uMaxAbs = 1.0e+6

amr.isothermal = false
